syntax = "proto3";

package ecommerce;

import "google/protobuf/empty.proto";
import "general.proto";

option go_package = "./pb";

message Order {
  int64 product_id = 1;
  int32 order_quantity = 2;
  int64 customer_id = 3;
  int64 supplier_id = 4;
  int64 order_id = 5;
}

message CreateOrderRequest {
  int64 product_id = 1;
  int32 order_quantity = 2;
  int64 customer_id = 3;
  int64 supplier_id = 4;
}
message CreateOrderResponse { string message = 1; }

message DeleteOrderRequest { string order_id = 1; }
message DeleteOrderResponse { string message = 1; }

enum OrderStatus {
  waiting = 0;
  handled = 1;
}

message UpdateOrderStatusRequest {
  int64 order_id = 1;
  OrderStatus status = 2;
}
message UpdateOrderStatusResponse { string message = 1; }

message HandleOrderRequest { int64 order_id = 1; }
message HandleOrderResponse { string message = 1; }

message GetWaitingOrderBySupplierRequest { int64 supplier_id = 1; }
message GetWaitingOrderBySupplierResponse { repeated Order list_order = 1; }

message GetWaitingOrderByCustomerRequest { int64 customer_id = 1; }
message GetWaitingOrderByCustomerResponse { repeated Order list_order = 1; }

message GetOrderByProductIdRequest { int64 product_id = 1; }
message GetOrderByProductIdResponse { int64 count = 1; }
message CheckOrderIsHandledRequest { int64 product_id = 1; }
message CheckOrderIsHandledResponse { bool is_bought = 1; }

service OrderService {
  rpc Ping(google.protobuf.Empty) returns (Pong) {}
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}
  rpc DeleteOrder(DeleteOrderRequest) returns (DeleteOrderResponse) {}
  rpc UpdateOrder(UpdateOrderStatusRequest)
      returns (UpdateOrderStatusResponse) {}
  rpc HandleOrder(HandleOrderRequest) returns (HandleOrderResponse) {}
  rpc GetWaitingOrderBySupplier(GetWaitingOrderBySupplierRequest)
      returns (GetWaitingOrderBySupplierResponse) {}
  rpc GetWaitingOrderByCustomer(GetWaitingOrderByCustomerRequest)
      returns (GetWaitingOrderByCustomerResponse) {}
  rpc GetOrderByProductId(GetOrderByProductIdRequest)
      returns (GetOrderByProductIdResponse) {}
  rpc CheckOrderIsHandled(CheckOrderIsHandledRequest)
      returns (CheckOrderIsHandledResponse) {}
}